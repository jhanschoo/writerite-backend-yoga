# TODO: refactor once graphql-yoga supports `extend`
type Query {
  _empty: String
  # User
  user(id: ID!): User
  users: [User!]
  # Deck
  deck(id: ID!): Deck
  userDecks: [Deck!]
  # Card
  card(id: ID!): Card
  cardsFromDeck(id: String): [Card!]
  # Room
  room(id: ID!): Room
  activeRooms: [Room!]
  roomsWithCurrentUser: [Room!]
}

type Mutation {
  _empty: String
  # Authorization
  signin(
    email: String!
    token: String!
    authorizer: String!
    identifier: String!
    persist: Boolean
  ): AuthResponse
  # Deck
  deckSave(id: ID, name: String): Deck
  deckDelete(id: ID!): ID
  # Card
  cardSave(id: ID, front: String!, back: String!, deckId: ID!): Card
  cardDelete(id: ID!): ID
  # Room
  roomCreate(name: String): Room
  roomAddOccupant(id: ID! occupantId: ID!): Room
  roomMessageCreate(roomId: ID! messageContent: String!): RoomMessage
}

type Subscription {
  _empty: String
  # Deck
  deckUpdatesOfUser: DeckUpdate!
  # Room
  activeRoomUpdates: RoomUpdate!
  # RoomMessage
  roomMessageUpdatesOfRoom(id: ID!): RoomMessageUpdate!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type DeckUpdate {
  mutation: MutationType!
  new: Deck
  oldId: string
}

type RoomMessageUpdate {
  mutation: MutationType!
  new: RoomMessage
  oldId: string
}

type RoomUpdate {
  mutation: MutationType!
  new: Room
  oldId: string
}

# Deck

type Deck {
  id: ID!
  name: String!
  owner: User!
  cards: [Card!]!
}

# Card

type Card {
  id: ID!
  front: String!
  back: String!
  deck: Deck!
}

# Room

type Room {
  id: ID!
  name: String
  owner: User!
  occupants: [User!]!
  messages: [RoomMessage!]!
}

# RoomMessage

type RoomMessage {
  id: ID!
  content: String!
  sender: User
}

# Authorization

type AuthResponse {
  user: User!
  token: String!
}

# User

type User {
  id: ID!
  email: String!
  roles: [String!]!
  decks: [Deck!]!
}
