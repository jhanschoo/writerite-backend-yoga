type Query {
  _empty: String
}

type Mutation {
  _empty: String
}

type Subscription {
  _empty: String
}

# Authorization

type AuthResponse {
  user: User!
  token: String!
}

extend type Mutation {
  signin(
    email: String!
    token: String!
    authorizer: String!
    identifier: String!
    persist: Boolean
  ): AuthResponse
}

# User

type User {
  id: ID!
  email: String!
  roles: [String!]!
  decks: [Deck!]!
}

extend type Query {
  users: [User!]!
  user(id: String!): User
}

# Deck

type Deck {
  id: ID!
  name: String!
  owner: User!
  cards: [Card!]!
}

extend type Query {
  userDecks: [Deck!]
  deck(id: String): Deck
}

extend type Mutation {
  deckSave(id: ID, name: String!): Deck
  deckDelete(id: ID!): Boolean!
}

# Card

type Card {
  id: ID!
  front: String!
  back: String!
  deck: Deck!
}

extend type Query {
  card(id: String): Card
  cardsFromDeck(id: String): [Card!]
}

extend type Mutation {
  cardSave(id: ID front: String! back:String! deck: ID!): Card
  cardDelete(id: ID!): Boolean!
}

# Room

type Room {
  id: ID!
  owner: User!
  occupants: [User!]!
  messages: [RoomMessage!]!
}

extend type Query {
  room(id: ID!): Room
}

extend type Mutation {
  roomCreate(owner: ID!): Room
  roomAddOccupant(room: ID! occupant: ID!): Room
  roomAddMessage(room: ID! messageContent: String!): Room
}

extend type Subscription {
  newRoomMessage(room: ID!): RoomMessage!
}

# RoomMessage

type RoomMessage {
  id: ID!
  content: String!
  sender: String
}
